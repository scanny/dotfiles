
" === PROBABLY MIGRATE ===============================================




" --- small adjustments for tmux-256color from xterm-256color ---
" --- may not be active in neovim ---
if exists('+termguicolors')
    " --- set foreground color ---
    let &t_8f = "[38;2;%lu;%lu;%lum"
    " --- set background color ---
    let &t_8b = "[48;2;%lu;%lu;%lum"
endif
" --- possible undercurl terminal codes ---
let &t_Cs = "\e[4:3m"
let &t_Ce = "\e[4:0m"


" === load plugins =================================================== {{{


" --- Loupe ----------------------------------------------------------
" --- better highlighting of search matches ---
Plug 'wincent/loupe'
" nnoremap <CR> :nohlsearch<CR>
" Enter - :noh - turn off search highlighting, but not in quickfix
" nnoremap <expr> <CR> &buftype ==# 'quickfix' ? '<CR>' : ':nohlsearch<CR>'
" nmap <leader>n <Plug>(LoupeClearHighlight)
nmap <CR> <Plug>(LoupeClearHighlight)
" }}}


" --- provides quick-fix window behavior improvements ---
Plug 'yssl/QFEnter'


" --- reStructuredText support ---
Plug 'gu-fan/riv.vim'


" --- split args onto separate lines ---
Plug 'FooSoft/vim-argwrap'
let g:argwrap_tail_comma = 1


" --- improved '*' search-under-cursor behaviors ---
Plug 'haya14busa/vim-asterisk'

" --- provides Cucumber language syntax and folding ---
Plug 'tpope/vim-cucumber'

" --- highlight individual lines ---
Plug 'airblade/vim-highline'

" --- markdown (plasticboy) ---
source ~/.config/nvim/plugins/vim-markdown.vim

" --- better indent behavior after colon etc. on Python
Plug 'Vimjas/vim-python-pep8-indent'

" }}}


" === PROBABLY OBSOLETE ============================================== {{{

" --- COMPLETION ---
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" Plug 'deoplete-plugins/deoplete-jedi'
Plug 'davidhalter/jedi-vim'

" --- deoplete -------------------------------------------------------
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#jedi#enable_typeinfo = 0
" --- Tab for autocomplete ---
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" j* - Jedi definitions
nmap <leader>jd :call jedi#goto_definitions()<CR>
nmap <leader>ju :call jedi#usages()<CR>

" --- jedi-vim -------------------------------------------------------
let g:jedi#rename_command = ""
let g:jedi#usages_command = ""



" --- STATUS LINE ----------------------------------------------------
Plug 'itchyny/lightline.vim'

" --- lightline ---
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'gitbranch' ], [ 'readonly', 'filename' ] ],
      \   'right': [ [ 'lineinfo' ], ['filetype'] ]
      \ },
      \ 'component': {
      \   'filetype': '%{&ft!=#""?&ft." ":"no ft"}',
      \   'lineinfo': '%-14.(‚Ñì %l/%L ùöå %-2c%)',
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'gitbranch': 'LightlineBranchName',
      \ },
      \ 'separator': {'left': "\ue0b0", 'right': "\ue0b2"},
      \ 'subseparator': {'left': 'ÓÇ±'},
      \ }

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%') : '[No Name]'
  let modified = &modified ? ' ‚≠ïÔ∏è' : ''
  return filename . modified
endfunction

function! LightlineBranchName()
    if FugitiveHead() == ''
        return ' '
    endif
    return 'ÓÇ† ' . FugitiveHead()
endfunction



" --- FastFold -------------------------------------------------------
" --- Efficient code folding for Python, which is a hard case because of sig-space ---
Plug 'Konfekt/FastFold'
Plug 'tmhedberg/SimpylFold'
let g:fastfold_savehook = 1



" --- rip-grep in Vim; multi-file search ---
let g:FerretCommandNames={'Black': 'Fblack'}
" --- NOTE: installing ferret causes `E471: Argument required` error unless its :Black
" --- command is remapped (conflicts with Python Black command).
Plug 'wincent/ferret'


" --- Syntastic ------------------------------------------------------
Plug 'scrooloose/syntastic'
let g:syntastic_auto_loc_list = 1
let g:syntastic_cursor_columns = 0
let g:syntastic_echo_current_error = 0
let g:syntastic_enable_baloons = 0
let g:syntastic_enable_signs = 0
let g:syntastic_mode_map = {"mode": "active", "passive_filetypes": ["rst"]}
let g:syntastic_python_checkers = ['flake8', 'mypy']
let g:syntastic_python_mypy_args = ""
let g:syntastic_rst_checkers = []



" --- UltiSnips ---
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'



" === configure plugins ============================================== {{{


" --- dirvish --------------------------------------------------------
let g:dirvish_relative_paths = 1  " --- paths relative to pwd ---


" --- Loupe ----------------------------------------------------------
let g:LoupeVeryMagic = 0  " --- no automatic \v in :substitute ---


" --- python-syntax --------------------------------------------------
let g:python_highlight_all = 1
let g:python_slow_sync = 0


" --- riv ------------------------------------------------------------

" disable pesky table auto-formatting
let g:riv_auto_format_table = 0

" update folds on file save
let g:riv_fold_auto_update = 1

" show blank lines at end of fold, except the first one
let g:riv_fold_blank = 0

" turn folding on
let g:rst_fold_enabled = 1

" don't fold lists
let g:riv_fold_level = 1

" Ctrl-Q is leader for Riv commands
let g:riv_global_leader = '<C-q>'

" Let <CR> stay as :nohlsearch
let g:riv_ignored_nmaps = '<CR>'

" Avoid 'maxmempattern' error on certain lines
let g:riv_link_cursor_hl = 0


" --- SimpylFold -----------------------------------------------------
" let g:SimpylFold_docstring_preview = 1
let g:SimpylFold_fold_docstring = 0
" let g:SimpylFold_fold_import = 0


" --- UltiSnips ------------------------------------------------------
let g:UltiSnipsExpandTrigger="<C-u>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"


" --- vim-asterisk ---------------------------------------------------

" --- cursor does not jump to next match on '*' ---
let g:asterisk#keeppos = 1
map *   <Plug>(asterisk-*)
map #   <Plug>(asterisk-#)
map g*  <Plug>(asterisk-g*)
map g#  <Plug>(asterisk-g#)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
map z#  <Plug>(asterisk-z#)
map gz# <Plug>(asterisk-gz#)


" --- Color Scheme ---------------------------------------------------

" -- select solarized dark or light based on time-of-day ---
if strftime("%H") > 7 && strftime("%H") < 21
    set background=light
else
    set background=dark
endif

colorscheme solarized


"" XML Syntax -----------------------------------------------
let g:xml_syntax_folding=1



" === set options ==================================================== {{{

" --- ar - automatically re-read an externally-changed file ---
set autoread
autocmd FocusGained * :checktime

" --- fcs - characters used for folds, window dividers, etc. ---
let s:middot='¬∑'
let s:raquo='¬ª'
let s:small_l='‚Ñì'
""" Override default `foldtext()`, which produces something like:
"""
"""   +---  2 lines: source $HOME/.vim/pack/bundle/opt/vim-pathogen/autoload/pathogen.vim--------------------------------
"""
""" Instead returning:
"""
"""   ¬ª¬∑¬∑[2‚Ñì]¬∑¬∑: source $HOME/.vim/pack/bundle/opt/vim-pathogen/autoload/pathogen.vim¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑
"""
"let g:coiled_snake_set_foldtext = 0
function! MyFoldText() abort
  " let l:lines='[' . printf('[%3d](v:foldend - v:foldstart + 1)) . s:small_l . ']'
  let l:lines=printf('[%3d%s]', (v:foldend - v:foldstart + 1), s:small_l)
  let l:first=substitute(getline(v:foldstart), '\v *', '', '')
  let l:dashes=substitute(v:folddashes, '-', s:middot, 'g')
  return s:raquo . s:middot . s:middot . l:lines . l:dashes . ': ' . l:first
endfunction

set fillchars=vert:‚îÉ   " BOX DRAWINGS HEAVY VERTICAL (U+2503, UTF-8: E2 94 83)
set fillchars+=fold:¬∑  " MIDDLE DOT (U+00B7, UTF-8: C2 B7)
set foldtext=MyFoldText()

" --- js - inserts two spaces on join after period or ?, ! ---
set nojoinspaces

" --- sm - briefly jump to matching bracket with bracket is inserted ---
set showmatch
" --- but don't highlight them indefinitely and obscure cursor ---
let g:loaded_matchparen = 1


" === keyboard remappings ============================================ {{{

" --- global mappings -------------------------------------- {{{

" ---use F5 to toggle between light and dark background ---
map <F5> :let &background = ( &background == "dark" ? "light" : "dark" )<CR>

" }}}


" --- leader commands -------------------------------------- {{{

" a - wrap function args in parens onto separate lines
nnoremap <silent> <leader>a :ArgWrap<CR>

" gd - :Gdiff
map <leader>gd :Gdiff<CR>

" gs - :Gstatus
map <leader>gs :Gstatus<CR>

" h - Highline Toggle
nmap <leader>h <Plug>(HighlineToggle)  # highlight current line
xmap <leader>h <Plug>(HighlineToggle)  # highlight selected lines

" H - Highline Clear (all highlighted lines)
nmap <leader>H <Plug>(HighlineClear)

" r - toggle relative line numbers
function! ToggleRelativeNumber()
  if (&relativenumber == 1)
    set number
    set norelativenumber
  else
    set relativenumber
  endif
endfunc
nnoremap <leader>r :call ToggleRelativeNumber()<CR>

" R - run current module on ,t
function! MakeCurrentBufferRunModule()
    let l:path=expand('%')
    execute 'nnoremap <leader>t :w\|!python ' l:path "<CR>"
    echo ',t: ' . l:path
endfunc
nnoremap <silent> <leader>R :call MakeCurrentBufferRunModule()<CR>

" T - set current (test) module to run on ,t
function! MakeCurrentBufferTestModule()
    let l:path=expand('%')
    execute 'nnoremap <leader>t :w\|!py.test -x -q --tb=native --disable-warnings' l:path "<CR>"
    echo ',t: ' . l:path
endfunc
nnoremap <silent> <leader>T :call MakeCurrentBufferTestModule()<CR>

" }}}
